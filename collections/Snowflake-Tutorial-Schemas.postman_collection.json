{
	"info": {
		"_postman_id": "8066686c-505e-4d39-920d-c2b6b4f0ecdc",
		"name": "Snowflake-Tutorial-Schemas",
		"description": "# Snowflake Databases\n\nShows few examples on how to work with Snowflake API using Snowflake REST API. For other examples and request/request parameters refer to [Database API Reference](https://docs.snowflake.com/en/developer-guide/snowflake-rest-api/reference/database).",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39411248"
	},
	"item": [
		{
			"name": "Create or Alter Schemas",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.test(\"Create Schemas\",() =>{",
							"    const kind  = pm.iterationData.get(\"kind\")?pm.iterationData.get(\"kind\"):\"permanent\"",
							"    pm.variables.set(\"db_name\",pm.iterationData.get(\"database_name\"))",
							"    pm.variables.set(\"schema_kind\",kind.toUpperCase())",
							"    pm.variables.set(\"schema_name\",pm.iterationData.get(\"name\"))",
							"    pm.variables.set(\"schema_comment\", pm.iterationData.get(\"comment\")?pm.iterationData.get(\"comment\"):\"no comments\")",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Schemas\", function () {",
							"    const schema_name = pm.variables.get(\"name\").toUpperCase()",
							"    const wants = [",
							"    `${schema_name} already exists, statement succeeded.`,",
							"    `Schema ${schema_name} successfully created.`,",
							"    \"Statement executed successfully.\"",
							"    ]",
							"    console.log(\"Want Statuses\",wants);",
							"    pm.response.to.have.status(200);",
							"    const responseJson = pm.response.json();",
							"    console.log(\"Response JSON:\",responseJson);",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"    const got = responseJson.status",
							"    console.log(\"Got status:\",got)",
							"    pm.expect(got).to.be.oneOf(wants,`Expected one of ${wants} but got {got}`);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{snowflake_jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-snowflake-authorization-token-type",
						"value": "{{snowflake_auth_type}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{schema_name}}\",\n    \"kind\": \"{{schema_kind}}\",\n    \"comment\": \"{{schema_comment}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v2/databases/{{db_name}}/schemas/{{schema_name}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"databases",
						"{{db_name}}",
						"schemas",
						"{{schema_name}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Schemas",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.test(\"Get Schemas\",() =>{",
							"    pm.variables.set(\"db_name\",pm.iterationData.get(\"database_name\"))",
							"    pm.variables.set(\"schema_name\",pm.iterationData.get(\"name\"))",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed the syntax error in accessing the array",
							"pm.test(\"Get Schemas\", () => {",
							"    const responseJson = pm.response.json();",
							"    const db_name = pm.variables.get(\"db_name\").toUpperCase()",
							"    const schema_name = pm.variables.get(\"schema_name\").toUpperCase()",
							"    pm.response.to.have.status(200);",
							"    pm.expect(responseJson.length).to.be.gte(0);",
							"    responseJson.forEach((schema) => {",
							"        pm.expect(schema.name).to.be.eq(schema_name)",
							"        pm.expect(schema.database_name).to.be.eq(db_name)",
							"    })",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{snowflake_jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-snowflake-authorization-token-type",
						"value": "{{snowflake_auth_type}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v2/databases/{{db_name}}/schemas?like={{schema_name}}%25",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"databases",
						"{{db_name}}",
						"schemas"
					],
					"query": [
						{
							"key": "like",
							"value": "{{schema_name}}%25"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Drop Schemas",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.test(\"Drop Schema\",() =>{",
							"    pm.variables.set(\"db_name\",pm.iterationData.get(\"database_name\"))",
							"    pm.variables.set(\"schema_name\",pm.iterationData.get(\"name\"))",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Drop Tables\", function () {",
							"    const schema_name = pm.variables.get(\"name\").toUpperCase()",
							"    const wants = [",
							"    `${schema_name} successfully dropped.`,",
							"    `Drop statement executed successfully (${schema_name} already dropped).`",
							"    ]",
							"    console.log(\"Want Statuses\",wants);",
							"    pm.response.to.have.status(200);",
							"    const responseJson = pm.response.json();",
							"    console.log(\"Response JSON:\",responseJson);",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"    const got = responseJson.status",
							"    console.log(\"Got status:\",got)",
							"    pm.expect(got).to.be.oneOf(wants,`Expected one of ${wants} but got {got}`);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{snowflake_jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-snowflake-authorization-token-type",
						"value": "{{snowflake_auth_type}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v2/databases/{{db_name}}/schemas/{{schema_name}}?ifExists=true",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"databases",
						"{{db_name}}",
						"schemas",
						"{{schema_name}}"
					],
					"query": [
						{
							"key": "ifExists",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Undrop Schemas",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.test(\"UnDrop Schema\",() =>{",
							"    pm.variables.set(\"schema_name\",pm.iterationData.get(\"name\"))",
							"    pm.variables.set(\"db_name\",pm.iterationData.get(\"database_name\"))",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Undrop Schemas\", function () {",
							"    const schemaName = pm.variables.get(\"name\").toUpperCase()",
							"    const responseJson = pm.response.json();",
							"    console.log(\"Response JSON:\",responseJson);",
							"    ",
							"    const responseCode = responseJson.code? responseJson.code:\"\"",
							"    console.log(\"RESPONSE CODE:\",responseCode)",
							"    const responseMessage = responseJson.message? responseJson.message:\"\"",
							"    console.log(\"RESPONSE Message:\",responseMessage)",
							"    if(responseCode&&responseMessage){",
							"      pm.expect(responseCode).to.be.eql(\"090025\")",
							"      pm.expect(responseMessage).to.be.eql(`schema ${schemaName.toLowerCase()} did not exist or was purged.`)",
							"    }else{",
							"    const wants = [",
							"    `Schema ${schemaName} successfully restored.`",
							"    ]",
							"    console.log(\"Want Statuses\",wants);",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"    const got = responseJson.status",
							"    console.log(\"Got status:\",got)",
							"    pm.expect(got).to.be.oneOf(wants,`Expected one of ${wants} but got {got}`);",
							"    }",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{snowflake_jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-snowflake-authorization-token-type",
						"value": "{{snowflake_auth_type}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v2/databases/{{db_name}}/schemas/{{schema_name}}:undrop",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"databases",
						"{{db_name}}",
						"schemas",
						"{{schema_name}}:undrop"
					]
				}
			},
			"response": []
		}
	]
}