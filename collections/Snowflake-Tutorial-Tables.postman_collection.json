{
	"info": {
		"_postman_id": "8ac96c37-8edc-4c70-b32a-db932a7f9955",
		"name": "Snowflake-Tutorial-Tables",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39411248"
	},
	"item": [
		{
			"name": "Create or Alter Tables",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.test(\"Create Tables\",() =>{",
							"    pm.variables.set(\"db_name\",pm.iterationData.get(\"database_name\"))",
							"    pm.variables.set(\"schema_name\",pm.iterationData.get(\"schema_name\"))",
							"    pm.variables.set(\"kind\",pm.iterationData.get(\"kind\")?pm.iterationData.get(\"kind\").toUpperCase():\"PERMANENT\")",
							"    pm.variables.set(\"name\",pm.iterationData.get(\"name\"))",
							"    pm.variables.set(\"columns\",JSON.stringify(pm.iterationData.get(\"columns\")))",
							"    pm.variables.set(\"comment\", pm.iterationData.get(\"comment\")?pm.iterationData.get(\"comment\"):\"no comments\")",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Tables\", function () {",
							"    const wants = [",
							"    `${pm.variables.get(\"name\").toUpperCase()} already exists, statement succeeded.`,",
							"    `Table ${pm.variables.get(\"name\").toUpperCase()} successfully created.`,",
							"    \"Statement executed successfully.\"",
							"    ]",
							"    console.log(\"Want Statuses\",wants);",
							"    pm.response.to.have.status(200);",
							"    const responseJson = pm.response.json();",
							"    console.log(\"Response JSON:\",responseJson);",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"    const got = responseJson.status",
							"    console.log(\"Got status:\",got)",
							"    pm.expect(got).to.be.oneOf(wants,`Expected one of ${wants} but got {got}`);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{snowflake_jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-snowflake-authorization-token-type",
						"value": "{{snowflake_auth_type}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{name}}\",\n    \"kind\": \"{{kind}}\",\n    \"columns\": {{columns}},\n    \"comment\": \"{{comment}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v2/databases/{{db_name}}/schemas/{{schema_name}}/tables/{{name}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"databases",
						"{{db_name}}",
						"schemas",
						"{{schema_name}}",
						"tables",
						"{{name}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Tables",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.test(\"Create Tables\",() =>{",
							"    pm.variables.set(\"db_name\",pm.iterationData.get(\"database_name\"))",
							"    pm.variables.set(\"schema_name\",pm.iterationData.get(\"schema_name\"))",
							"    pm.variables.set(\"kind\",pm.iterationData.get(\"kind\")?pm.iterationData.get(\"kind\").toUpperCase():\"PERMANENT\")",
							"    pm.variables.set(\"name\",pm.iterationData.get(\"name\"))",
							"    pm.variables.set(\"columns\",JSON.stringify(pm.iterationData.get(\"columns\")))",
							"    pm.variables.set(\"comment\", pm.iterationData.get(\"comment\")?pm.iterationData.get(\"comment\"):\"no comments\")",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get Tables\", () => {",
							"    const responseJson = pm.response.json();",
							"    const name = pm.variables.get(\"name\").toUpperCase()",
							"    const db_name = pm.variables.get(\"db_name\").toUpperCase()",
							"    const schema_name = pm.variables.get(\"schema_name\").toUpperCase()",
							"    pm.response.to.have.status(200);",
							"    pm.expect(responseJson.length).to.be.gte(0);",
							"    responseJson.forEach((table) => {",
							"        pm.expect(table.name).to.be.eq(name)",
							"        pm.expect(table.database_name).to.be.eq(db_name)",
							"        pm.expect(table.schema_name).to.be.eq(schema_name)",
							"        //TODO add check verify columns",
							"    })",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{snowflake_jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-snowflake-authorization-token-type",
						"value": "{{snowflake_auth_type}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{name}}\",\n    \"kind\": \"{{kind}}\",\n    \"columns\": {{columns}},\n    \"comment\": \"{{comment}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v2/databases/{{db_name}}/schemas/{{schema_name}}/tables?like={{name}}%25",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"databases",
						"{{db_name}}",
						"schemas",
						"{{schema_name}}",
						"tables"
					],
					"query": [
						{
							"key": "like",
							"value": "{{name}}%25"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Drop Tables",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.test(\"Drop Tables\",() =>{",
							"    pm.variables.set(\"db_name\",pm.iterationData.get(\"database_name\"))",
							"    pm.variables.set(\"schema_name\",pm.iterationData.get(\"schema_name\"))",
							"    pm.variables.set(\"name\",pm.iterationData.get(\"name\"))",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Drop Tables\", function () {",
							"    const tableName = pm.variables.get(\"name\").toUpperCase()",
							"    const wants = [",
							"    `${tableName} successfully dropped.`,",
							"    `Drop statement executed successfully (${tableName} already dropped).`",
							"    ]",
							"    console.log(\"Want Statuses\",wants);",
							"    pm.response.to.have.status(200);",
							"    const responseJson = pm.response.json();",
							"    console.log(\"Response JSON:\",responseJson);",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"    const got = responseJson.status",
							"    console.log(\"Got status:\",got)",
							"    pm.expect(got).to.be.oneOf(wants,`Expected one of ${wants} but got {got}`);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{snowflake_jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-snowflake-authorization-token-type",
						"value": "{{snowflake_auth_type}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v2/databases/{{db_name}}/schemas/{{schema_name}}/tables/{{name}}?ifExists=true",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"databases",
						"{{db_name}}",
						"schemas",
						"{{schema_name}}",
						"tables",
						"{{name}}"
					],
					"query": [
						{
							"key": "ifExists",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Undrop Tables",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.test(\"Undrop Tables\",() =>{",
							"    pm.variables.set(\"db_name\",pm.iterationData.get(\"database_name\"))",
							"    pm.variables.set(\"schema_name\",pm.iterationData.get(\"schema_name\"))",
							"    pm.variables.set(\"name\",pm.iterationData.get(\"name\"))",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Undrop Tables\", function () {",
							"    const tableName = pm.variables.get(\"name\").toUpperCase()",
							"    const responseJson = pm.response.json();",
							"    console.log(\"Response JSON:\",responseJson);",
							"    ",
							"    const responseCode = responseJson.code? responseJson.code:\"\"",
							"    console.log(\"RESPONSE CODE:\",responseCode)",
							"    const responseMessage = responseJson.message? responseJson.message:\"\"",
							"    console.log(\"RESPONSE Message:\",responseMessage)",
							"    if(responseCode&&responseMessage){",
							"      pm.expect(responseCode).to.be.eql(\"090025\")",
							"      pm.expect(responseMessage).to.be.eql(`table ${tableName.toLowerCase()} did not exist or was purged.`)",
							"    }else{",
							"    const wants = [",
							"    `Table ${tableName} successfully restored.`",
							"    ]",
							"    console.log(\"Want Statuses\",wants);",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"    const got = responseJson.status",
							"    console.log(\"Got status:\",got)",
							"    pm.expect(got).to.be.oneOf(wants,`Expected one of ${wants} but got {got}`);",
							"    }",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{snowflake_jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-snowflake-authorization-token-type",
						"value": "{{snowflake_auth_type}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v2/databases/{{db_name}}/schemas/{{schema_name}}/tables/{{name}}:undrop",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"databases",
						"{{db_name}}",
						"schemas",
						"{{schema_name}}",
						"tables",
						"{{name}}:undrop"
					]
				}
			},
			"response": []
		}
	]
}